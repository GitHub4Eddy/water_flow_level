{"name":"Water Level","type":"com.fibaro.multilevelSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_401"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label2","style":{"weight":"1.2"},"text":"Label2","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"label3","style":{"weight":"1.2"},"text":"Label3","type":"label"},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_401"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"Address","value":"https://www.vigicrues.gouv.fr/services/observations.json/index.php?CdStationHydro="},{"name":"Path","value":"&GrdSerie=H&FormatSortie=simple"},{"name":"StationHydro","value":"F700000103"},{"name":"Interval","value":"3600"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QuickApp Water Level \n\n-- This QuickApp gets the actual water levels from rivers in France\n-- The latest water level of your selected hydro station is updated in the value of this QuickApp\n-- See for more information: https://www.vigicrues.gouv.fr\n-- Service d'information sur le risque de crues des principaux cours d'eau en France\n\n\n-- Version 0.5 (16th August 2020)\n-- Error message instead of debug message in case of error\n-- Adjusted the date/time in the label and debug message. If the json file was in a different order, a wrong date/time could show. \n-- Changed method of adding QuickApp variables, so they can be edited\n\n\n-- Version 0.4 (7th August 2020)\n-- Changed debug message actual level with location\n-- Added QuickApp variables\n\n-- Version 0.3 (3rd August 2020)\n-- Put the latest WaterLevel value in QuickApp value\n-- Put the latest DateTime value in the QuickApp log\n-- Added labels with the json data\n-- Added debug notification\n\n-- Version 0.2 (3nd August 2020)\n-- Date time value converted to readable time\n-- Added the latest date, time and waterlevel values\n\n\n-- No modifications are needed below this line\n\n\nfunction QuickApp:onInit()\n    __TAG = \"WATER_LEVEL_\"..plugin.mainDeviceId\n    self:debug(\"OnInit\") \n    self.http = net.HTTPClient({timeout=3000})\n     \n    Address = self:getVariable(\"Address\")\n    Path = self:getVariable(\"Path\")\n    StationHydro = self:getVariable(\"StationHydro\")\n    Interval = tonumber(self:getVariable(\"Interval\")) \n\n    -- Check existence of the mandatory variables, if not, create them with default values\n    if Address == \"\" or Address == nil then \n      Address = \"https://www.vigicrues.gouv.fr/services/observations.json/index.php?CdStationHydro=\" -- Default Address \n      self:setVariable(\"Address\",Address)\n      self:trace(\"Added QuickApp variable Addres\")\n    end\n    if Path == \"\" or Path == nil then \n      Path = \"&GrdSerie=H&FormatSortie=simple\" -- Default path\n      self:setVariable(\"Path\",Path)\n      self:trace(\"Added QuickApp variable Path\")\n    end\n    if StationHydro ==\"\" or StationHydro == nil then\n      StationHydro = \"F700000103\" -- Default StationHydro is F700000103\n      self:setVariable(\"StationHydro\",StationHydro)\n      self:trace(\"Added QuickApp variable StationHydro\")\n    end\n    if Interval == \"\" or Interval == nil then\n      Interval = \"3600\" -- Default interval is 3600\n      self:setVariable(\"Interval\",Interval)\n      self:trace(\"Added QuickApp variable Interval\")   \n      Interval = tonumber(Interval)\n    end\n\n    self:loop(\"\")\nend\n\nfunction QuickApp:loop(text)\n\n    local url = Address ..StationHydro ..Path\n    local Act_WaterLevel = 0\n    local Act_DateTime = 0\n\n    self.http:request(url, {\n      options={\n        headers = {Accept = \"application/json\"}, method = 'GET'}, success = function(response)\n        --self:debug(\"response status:\", response.status) \n        --self:debug(\"headers:\", response.headers[\"Content-Type\"]) \n        apiResult = response.data\n\n        --self:debug(\"Full apiResult: \",apiResult)\n\n        jsonTable = json.decode(apiResult) -- JSON decode from api to lua-table\n\n        -- Get the values\n        local VersionFlux = jsonTable.VersionFlux \n        local LbStationHydro = jsonTable.Serie.LbStationHydro \n        local Link = jsonTable.Serie.Link\n        local GrdSerie = jsonTable.Serie.GrdSerie\n\n        --self:debug(\"VersionFlux: \", VersionFlux)\n        --self:debug(\"LbStationHydro: \", LbStationHydro)\n        --self:debug(\"Link: \", Link)\n        --self:debug(\"GrdSerie: \", GrdSerie) \n\n \n        for i in pairs(jsonTable.Serie.ObssHydro) do \n          DateTime = os.date(\"%d-%m-%Y %X\", string.sub(jsonTable.Serie.ObssHydro[i][1],1,10))\n          WaterLevel = jsonTable.Serie.ObssHydro[i][2]\n          if jsonTable.Serie.ObssHydro[i][1] > Act_DateTime then\n            Act_DateTime = jsonTable.Serie.ObssHydro[i][1]\n            Act_WaterLevel = WaterLevel\n          end\n        end\n        Act_DateTime = os.date(\"%d-%m-%Y %X\", string.sub(Act_DateTime,1,10))\n\n        -- Notification \n        self:debug(\"On \" ..Act_DateTime ..\" the actual water level is \" ..Act_WaterLevel ..\" at \" ..LbStationHydro)\n\n        -- Update properties\n        self:updateProperty(\"value\", tonumber(Act_WaterLevel))\n        self:updateProperty(\"unit\", \"m\")\n        self:updateProperty(\"log\", Act_DateTime)\n\n        -- Update View\n        self:updateView(\"label1\", \"text\", \"Station Hydro: \" ..LbStationHydro) \n        self:updateView(\"label2\", \"text\", \"Date time: \" ..Act_DateTime)\n        self:updateView(\"label3\", \"text\", \"Actual WaterLevel: \" ..Act_WaterLevel ..\" m\")\n\n        --self:debug(\"--------------------- END --------------------\") \n\n      end,\n      error = function(error)\n      self:error('error: ' .. json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n    }) \n\n    fibaro.setTimeout(Interval*1000, function() -- Checks every n seconds for new data\n    self:loop(text)\n  end)\nend "}]}